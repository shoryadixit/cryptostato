{"ast":null,"code":"/** Types of elements found in htmlparser2's DOM */\nexport var ElementType;\n\n(function (ElementType) {\n  /** Type for the root element of a document */\n  ElementType[\"Root\"] = \"root\";\n  /** Type for Text */\n\n  ElementType[\"Text\"] = \"text\";\n  /** Type for <? ... ?> */\n\n  ElementType[\"Directive\"] = \"directive\";\n  /** Type for <!-- ... --> */\n\n  ElementType[\"Comment\"] = \"comment\";\n  /** Type for <script> tags */\n\n  ElementType[\"Script\"] = \"script\";\n  /** Type for <style> tags */\n\n  ElementType[\"Style\"] = \"style\";\n  /** Type for Any tag */\n\n  ElementType[\"Tag\"] = \"tag\";\n  /** Type for <![CDATA[ ... ]]> */\n\n  ElementType[\"CDATA\"] = \"cdata\";\n  /** Type for <!doctype ...> */\n\n  ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType || (ElementType = {}));\n/**\r\n * Tests whether an element is a tag or not.\r\n *\r\n * @param elem Element to test\r\n */\n\n\nexport function isTag(elem) {\n  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;\n} // Exports for backwards compatibility\n\n/** Type for the root element of a document */\n\nexport var Root = ElementType.Root;\n/** Type for Text */\n\nexport var Text = ElementType.Text;\n/** Type for <? ... ?> */\n\nexport var Directive = ElementType.Directive;\n/** Type for <!-- ... --> */\n\nexport var Comment = ElementType.Comment;\n/** Type for <script> tags */\n\nexport var Script = ElementType.Script;\n/** Type for <style> tags */\n\nexport var Style = ElementType.Style;\n/** Type for Any tag */\n\nexport var Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */\n\nexport var CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */\n\nexport var Doctype = ElementType.Doctype;","map":{"version":3,"names":["ElementType","isTag","elem","type","Tag","Script","Style","Root","Text","Directive","Comment","CDATA","Doctype"],"sources":["D:/cryptoStato/node_modules/dom-serializer/node_modules/domelementtype/lib/esm/index.js"],"sourcesContent":["/** Types of elements found in htmlparser2's DOM */\r\nexport var ElementType;\r\n(function (ElementType) {\r\n    /** Type for the root element of a document */\r\n    ElementType[\"Root\"] = \"root\";\r\n    /** Type for Text */\r\n    ElementType[\"Text\"] = \"text\";\r\n    /** Type for <? ... ?> */\r\n    ElementType[\"Directive\"] = \"directive\";\r\n    /** Type for <!-- ... --> */\r\n    ElementType[\"Comment\"] = \"comment\";\r\n    /** Type for <script> tags */\r\n    ElementType[\"Script\"] = \"script\";\r\n    /** Type for <style> tags */\r\n    ElementType[\"Style\"] = \"style\";\r\n    /** Type for Any tag */\r\n    ElementType[\"Tag\"] = \"tag\";\r\n    /** Type for <![CDATA[ ... ]]> */\r\n    ElementType[\"CDATA\"] = \"cdata\";\r\n    /** Type for <!doctype ...> */\r\n    ElementType[\"Doctype\"] = \"doctype\";\r\n})(ElementType || (ElementType = {}));\r\n/**\r\n * Tests whether an element is a tag or not.\r\n *\r\n * @param elem Element to test\r\n */\r\nexport function isTag(elem) {\r\n    return (elem.type === ElementType.Tag ||\r\n        elem.type === ElementType.Script ||\r\n        elem.type === ElementType.Style);\r\n}\r\n// Exports for backwards compatibility\r\n/** Type for the root element of a document */\r\nexport const Root = ElementType.Root;\r\n/** Type for Text */\r\nexport const Text = ElementType.Text;\r\n/** Type for <? ... ?> */\r\nexport const Directive = ElementType.Directive;\r\n/** Type for <!-- ... --> */\r\nexport const Comment = ElementType.Comment;\r\n/** Type for <script> tags */\r\nexport const Script = ElementType.Script;\r\n/** Type for <style> tags */\r\nexport const Style = ElementType.Style;\r\n/** Type for Any tag */\r\nexport const Tag = ElementType.Tag;\r\n/** Type for <![CDATA[ ... ]]> */\r\nexport const CDATA = ElementType.CDATA;\r\n/** Type for <!doctype ...> */\r\nexport const Doctype = ElementType.Doctype;\r\n"],"mappings":"AAAA;AACA,OAAO,IAAIA,WAAJ;;AACP,CAAC,UAAUA,WAAV,EAAuB;EACpB;EACAA,WAAW,CAAC,MAAD,CAAX,GAAsB,MAAtB;EACA;;EACAA,WAAW,CAAC,MAAD,CAAX,GAAsB,MAAtB;EACA;;EACAA,WAAW,CAAC,WAAD,CAAX,GAA2B,WAA3B;EACA;;EACAA,WAAW,CAAC,SAAD,CAAX,GAAyB,SAAzB;EACA;;EACAA,WAAW,CAAC,QAAD,CAAX,GAAwB,QAAxB;EACA;;EACAA,WAAW,CAAC,OAAD,CAAX,GAAuB,OAAvB;EACA;;EACAA,WAAW,CAAC,KAAD,CAAX,GAAqB,KAArB;EACA;;EACAA,WAAW,CAAC,OAAD,CAAX,GAAuB,OAAvB;EACA;;EACAA,WAAW,CAAC,SAAD,CAAX,GAAyB,SAAzB;AACH,CAnBD,EAmBGA,WAAW,KAAKA,WAAW,GAAG,EAAnB,CAnBd;AAoBA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqB;EACxB,OAAQA,IAAI,CAACC,IAAL,KAAcH,WAAW,CAACI,GAA1B,IACJF,IAAI,CAACC,IAAL,KAAcH,WAAW,CAACK,MADtB,IAEJH,IAAI,CAACC,IAAL,KAAcH,WAAW,CAACM,KAF9B;AAGH,C,CACD;;AACA;;AACA,OAAO,IAAMC,IAAI,GAAGP,WAAW,CAACO,IAAzB;AACP;;AACA,OAAO,IAAMC,IAAI,GAAGR,WAAW,CAACQ,IAAzB;AACP;;AACA,OAAO,IAAMC,SAAS,GAAGT,WAAW,CAACS,SAA9B;AACP;;AACA,OAAO,IAAMC,OAAO,GAAGV,WAAW,CAACU,OAA5B;AACP;;AACA,OAAO,IAAML,MAAM,GAAGL,WAAW,CAACK,MAA3B;AACP;;AACA,OAAO,IAAMC,KAAK,GAAGN,WAAW,CAACM,KAA1B;AACP;;AACA,OAAO,IAAMF,GAAG,GAAGJ,WAAW,CAACI,GAAxB;AACP;;AACA,OAAO,IAAMO,KAAK,GAAGX,WAAW,CAACW,KAA1B;AACP;;AACA,OAAO,IAAMC,OAAO,GAAGZ,WAAW,CAACY,OAA5B"},"metadata":{},"sourceType":"module"}